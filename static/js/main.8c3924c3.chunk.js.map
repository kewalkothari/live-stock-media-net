{"version":3,"sources":["Component/SparkLineComponent/SparkLineComponent.js","Component/TableRowComponent/TableRowComponent.js","Component/TableCompoenent/TableComponent.js","Containers/StocksComponent/StocksComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableRowComponent","react_default","a","createElement","build","data","this","props","stockHistory","limit","color","style","fill","type","React","Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stockName","stockPrice","lastUpdated","colorClass","updateTimeStamp","Date","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","push","className","SparkLineComponent_TableRowComponent","formatAMPM","TableComponent","rows","keys","tableData","forEach","element","TableRowComponent_TableRowComponent_TableRowComponent","key","generateRows","socketURL","StocksComponent","state","stockData","webSocket","WebSocket","TableComponent_TableComponent","_this2","onopen","console","log","onmessage","event","stockDataMessage","JSON","parse","state_stocks","objectSpread","value","parseFloat","toFixed","setState","onclose","App","StocksComponent_StocksComponent_StocksComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c3924c3.chunk.js","sourcesContent":["import React from 'react';\nimport { Sparklines, SparklinesLine, SparklinesSpots, SparklinesReferenceLine } from 'react-sparklines';\n\nexport default class TableRowComponent extends React.Component {\n\n    render() {\n        return (    \n                <Sparklines data={this.props.stockHistory} limit={30}>\n                    <SparklinesLine color=\"blue\" style={{ fill: \"none\" }}/>\n                    <SparklinesSpots />\n                    <SparklinesReferenceLine type=\"mean\" />\n                </Sparklines>\n                );\n    }\n}","import React from 'react';\nimport SparkLineComponent from '../SparkLineComponent/SparkLineComponent';\n\nimport './TableRowComponent.css';\n\nexport default class TableRowComponent extends React.Component {\n\n    stockName = '';\n    stockPrice = -1;\n    lastUpdated = '';\n    colorClass = '';\n    updateTimeStamp = 0;\n    stockHistory = []\n\n    constructor(props) {\n        super(props)\n        this.stockName = props.stockName;\n        this.stockPrice = props.stockPrice;\n        this.updateTimeStamp = new Date();\n    }\n\n    formatAMPM(date) {\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var seconds = date.getSeconds();\n        var ampm = hours >= 12 ? 'PM' : 'AM';\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n        minutes = minutes < 10 ? '0'+minutes : minutes;\n        seconds = seconds < 10 ? '0'+seconds : seconds;\n        var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\n        return strTime;\n    }\n\n    render() {\n        if (this.stockPrice !== -1) {\n            if (+this.stockPrice > +this.props.stockPrice) {\n                this.colorClass = 'decreasePrice';\n            } else if (+this.stockPrice < +this.props.stockPrice) {\n                this.colorClass = 'increasePrice';\n            } else {\n                this.colorClass = '';\n            }\n        }\n\n        if (this.stockPrice !== this.props.stockPrice) {\n            this.updateTimeStamp = new Date();\n            this.stockPrice = this.props.stockPrice;\n        } \n\n        this.stockHistory.push(this.stockPrice);\n\n        return (\n            <tr>\n                <td>{this.stockName}</td>\n                <td className={this.colorClass}>{this.stockPrice}</td>\n                <td className={'chartBackground'}>\n                    <SparkLineComponent stockHistory={this.stockHistory} />\n                </td>\n                <td>{this.formatAMPM(this.updateTimeStamp)}</td>\n            </tr>\n        );\n    }\n}","import React from 'react';\nimport TableRowComponent from '../TableRowComponent/TableRowComponent';\nimport './TableComponent.css'\n\nexport default class TableComponent extends React.Component {\n\n    generateRows() {\n        let rows = [];\n\n        Object.keys(this.props.tableData).forEach(element => {\n            rows.push(\n                <TableRowComponent \n                    stockName={element} \n                    stockPrice={this.props.tableData[element]}\n                    key={element}/>\n            )\n        });\n\n        return rows;\n    }\n\n    render() {\n        let rows = this.generateRows();\n        return ( \n            <table>\n                <thead>\n                    <tr>\n                        <th>Ticker</th>\n                        <th>Price</th>\n                        <th>Trend</th>\n                        <th>Last Updated</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n            );\n    }\n}","import React from 'react';\nimport TableComponent from '../../Component/TableCompoenent/TableComponent';\n\nimport './StocksComponent.css'\n\nconst socketURL = 'ws://stocks.mnet.website';\n\nexport default class StocksComponent extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            stockData: {}\n        }\n        this.webSocket = new WebSocket(socketURL);\n    }\n\n    render() {\n        return (\n                <TableComponent tableData={this.state.stockData}></TableComponent>\n        );\n    }\n\n    componentDidMount() {\n        this.webSocket.onopen = () => {\n            console.log('Connection Established!');\n        }\n\n        this.webSocket.onmessage = event => {\n            let stockDataMessage = JSON.parse(event.data);\n\n            let state_stocks = {...this.state.stockData };\n\n            stockDataMessage.forEach(data => {\n                let key = data[0];\n                let value = data[1];\n                state_stocks[key] = parseFloat(value).toFixed(2);\n            });\n            \n            this.setState({\n                stockData: state_stocks\n            });\n        }\n\n        this.webSocket.onclose = () => {\n            console.log('Connection Disconnected!');\n        }\n\n    }\n}","import React from 'react';\nimport './App.css';\nimport StocksComponent from './Containers/StocksComponent/StocksComponent';\n\nfunction App() {\n  return (\n    <StocksComponent></StocksComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}