{"version":3,"sources":["Component/TableRowComponent/TableRowComponent.js","Component/TableCompoenent/TableComponent.js","Containers/StocksComponent/StocksComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableRowComponent","stockName","stockPrice","lastUpdated","color","updateTime","this","props","style","react_default","a","createElement","React","Component","TableComponent","_this","rows","date","Date","Object","keys","tableData","forEach","element","push","TableRowComponent_TableRowComponent","getTime","generateRows","k","border","cellSpacing","socketURL","StocksComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","stockData","webSocket","WebSocket","TableComponent_TableComponent","_this2","onopen","console","log","onmessage","event","socketData","JSON","parse","data","stocks","key","value","parseFloat","toFixed","sorted_stocks","objectSpread","sort","setState","onclose","App","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6a8ee18.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class TableRowComponent extends React.Component {\n\n    stockName = '';\n    stockPrice = 0;\n    lastUpdated = '';\n    color = 'black';\n    updateTime = '';\n\n    componentWillUpdate() {\n\n        if (+this.stockPrice > +this.props.stockPrice) {\n            this.color = 'red';\n        } else if (+this.stockPrice < +this.props.stockPrice) {\n            this.color = 'green';\n        } else {\n            this.color = 'black';\n        }\n\n        if (this.stockPrice !== this.props.stockPrice) {\n            this.updateTime = this.props.updateTime;\n        }\n\n        this.stockName = this.props.stockName;\n        this.stockPrice = this.props.stockPrice;\n    }\n    \n    render() {\n        var style = {\n            color: this.color\n        };\n        return (\n            <tr>\n                <td>{this.stockName}</td>\n                <td style={style}>{this.stockPrice}</td>\n                <td>{this.updateTime}</td>\n            </tr>\n        );\n    }\n}","import React from 'react';\nimport TableRowComponent from '../TableRowComponent/TableRowComponent';\n\nexport default class TableComponent extends React.Component {\n\n    generateRows() {\n        let rows = [];\n        let date = new Date();\n\n        Object.keys(this.props.tableData).forEach(element => {\n            rows.push(\n                <TableRowComponent \n                    stockName={element} \n                    stockPrice={this.props.tableData[element]}\n                    updateTime={date.getTime()}/>\n            )\n        });\n\n        return rows;\n    }\n\n    render() {\n        let rows = this.generateRows();\n        var keys = [];\n        for(var k in this.props.tableData) keys.push(k);\n        return ( \n            <table border=\"1px\" cellSpacing=\"0\">\n                <thead>\n                    <th>Ticker</th>\n                    <th>Price</th>\n                    <th>Last Updated</th>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n            );\n    }\n}","import React from 'react';\nimport TableComponent from '../../Component/TableCompoenent/TableComponent';\n\nconst socketURL = 'ws://stocks.mnet.website';\n\nexport default class StocksComponent extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            stockData: {}\n        }\n        this.webSocket = new WebSocket(socketURL);\n    }\n\n    render() {\n        return (\n                <TableComponent tableData={this.state.stockData}></TableComponent>\n        );\n    }\n\n    componentDidMount() {\n        this.webSocket.onopen = () => {\n            console.log('Connection Established');\n        }\n\n        this.webSocket.onmessage = event => {\n            let socketData = JSON.parse(event.data);\n            let stocks = {};\n            console.log(socketData);    \n            socketData.forEach(data => {\n                let key = data[0];\n                let value = data[1];\n                stocks[key] = parseFloat(value).toFixed(2);\n            });\n\n            let sorted_stocks = {...this.state.stockData };\n            Object.keys(stocks).sort().forEach(function(key) {\n                sorted_stocks[key] = stocks[key];\n             });\n\n            this.setState({\n                stockData: sorted_stocks\n            });\n        }\n\n        this.webSocket.onclose = () => {\n            console.log('Connection Disconnected!');\n        }\n\n    }\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport StocksComponent from './Containers/StocksComponent/StocksComponent';\n\nfunction App() {\n  return (\n    <Switch>\n        <Route path=\"/stocks\" component={StocksComponent} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}