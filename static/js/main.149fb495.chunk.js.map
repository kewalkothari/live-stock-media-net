{"version":3,"sources":["Component/SparkLineComponent/SparkLineComponent.js","Constants/constant_strings.js","Component/TableRowComponent/TableRowComponent.js","Component/TableCompoenent/TableComponent.js","Containers/StocksComponent/StocksComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableRowComponent","react_default","a","createElement","build","data","this","props","stockHistory","limit","color","style","fill","type","React","Component","CSSStyleClass","StringUtility","EMPTY","COLON","SPACE","TimeString","WebSocketServerURL","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stockName","Constants","stockPrice","colorClass","updateTimeStamp","Date","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","updatedStockPrice","push","updateCellState","className","SparkLineComponent_TableRowComponent","formatAMPM","TableComponent","rows","keys","tableData","forEach","element","TableRowComponent_TableRowComponent_TableRowComponent","key","generateRows","StocksComponent","state","stockData","webSocket","WebSocket","_this2","onopen","console","log","onmessage","event","stockDataMessage","JSON","parse","state_stocks","objectSpread","value","parseFloat","toFixed","setState","onclose","TableComponent_TableComponent","App","StocksComponent_StocksComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.149fb495.chunk.js","sourcesContent":["import React from 'react';\nimport { Sparklines, \n         SparklinesLine, \n         SparklinesSpots, \n         SparklinesBars, \n         SparklinesReferenceLine } from 'react-sparklines';\n\nexport default class TableRowComponent extends React.Component {\n\n    render() {\n        \n        return (    \n                <Sparklines data={this.props.stockHistory} limit={30}>\n                    <SparklinesLine \n                        color=\"blue\" \n                        style={{ fill: \"none\" }}/>\n                    <SparklinesSpots />\n                    <SparklinesBars />\n                    <SparklinesReferenceLine type=\"mean\" />\n                </Sparklines>\n                );\n    }\n}","/**\n * Style classes\n */\nexport const CSSStyleClass = {\n    PRICE_INCREASE_BACKGROUND : 'increasePrice',\n    PRICE_DECREASE_BACKGROUND : 'decreasePrice',\n    CHART_CELL_BACKGROUND : 'chartBackground',\n    TREND_BLOCK_CELL : 'trendBlock'\n}\n\n/**\n * Basic string utilities\n */\nexport const StringUtility = {\n    EMPTY : '',\n    COLON : ':',\n    SPACE : ' '\n}\n\n/**\n * Time strings\n */\nexport const TimeString = {\n    AM : 'AM',\n    PM : 'PM',\n    ZERO : '0'\n}\n\n/**\n * Web socket server URL\n */\nexport const WebSocketServerURL = 'ws://stocks.mnet.website';\n","import React from 'react';\nimport SparkLineComponent from '../SparkLineComponent/SparkLineComponent';\nimport * as Constants from '../../Constants/constant_strings';\nimport './TableRowComponent.css';\n\nexport default class TableRowComponent extends React.Component {\n\n    stockName = Constants.StringUtility.EMPTY;\n    stockPrice = -1;\n    stockHistory = [];\n    colorClass = Constants.StringUtility.EMPTY;\n    updateTimeStamp = 0;\n\n    constructor(props) {\n        super(props)\n        this.stockName = props.stockName;\n        this.stockPrice = props.stockPrice;\n        this.updateTimeStamp = new Date();\n    }\n\n    formatAMPM(date) {\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        let seconds = date.getSeconds();\n        let ampm = hours >= 12 ? Constants.TimeString.PM : Constants.TimeString.AM;\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n        minutes = minutes < 10 ? Constants.TimeString.ZERO + minutes : minutes;\n        seconds = seconds < 10 ? Constants.TimeString.ZERO + seconds : seconds;\n        let strTime = hours + Constants.StringUtility.COLON + minutes + Constants.StringUtility.COLON \n                        + seconds + Constants.StringUtility.SPACE + ampm;\n\n        return strTime;\n    }\n\n    updateCellState(updatedStockPrice) {\n        if (this.stockPrice !== -1) {\n            if (+this.stockPrice > +updatedStockPrice) {\n                this.colorClass = Constants.CSSStyleClass.PRICE_DECREASE_BACKGROUND;\n            } else if (+this.stockPrice < +updatedStockPrice) {\n                this.colorClass = Constants.CSSStyleClass.PRICE_INCREASE_BACKGROUND;\n            } else {\n                this.colorClass = Constants.StringUtility.EMPTY;\n            }\n        }\n\n        if (this.stockPrice !== updatedStockPrice) {\n            this.updateTimeStamp = new Date();\n            this.stockPrice = updatedStockPrice;\n        } \n\n        this.stockHistory.push(this.stockPrice);\n    }\n\n    render() {\n        this.updateCellState(this.props.stockPrice);\n\n        return (\n            <tr>\n                <td>{this.stockName}</td>\n                <td className={this.colorClass}>{this.stockPrice}</td>\n                <td className={Constants.CSSStyleClass.CHART_CELL_BACKGROUND}>\n                    <SparkLineComponent stockHistory={this.stockHistory} />\n                </td>\n                <td>{this.formatAMPM(this.updateTimeStamp)}</td>\n            </tr>\n        );\n    }\n}","import React from 'react';\nimport TableRowComponent from '../TableRowComponent/TableRowComponent';\nimport * as Constants from '../../Constants/constant_strings';\nimport './TableComponent.css'\n\nexport default class TableComponent extends React.Component {\n\n    generateRows() {\n        let rows = [];\n\n        Object.keys(this.props.tableData).forEach(element => {\n            rows.push(\n                <TableRowComponent \n                    stockName={element} \n                    stockPrice={this.props.tableData[element]}\n                    key={element}/>\n            )\n        });\n\n        return rows;\n    }\n\n    render() {\n        let rows = this.generateRows();\n\n        return ( \n            <table>\n                <thead>\n                    <tr>\n                        <th>Ticker</th>\n                        <th>Price</th>\n                        <th className={Constants.CSSStyleClass.TREND_BLOCK_CELL}>Trend</th>\n                        <th>Last Updated</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n            );\n    }\n}","import React from 'react';\nimport TableComponent from '../../Component/TableCompoenent/TableComponent';\nimport * as Constants from '../../Constants/constant_strings';\n\nexport default class StocksComponent extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            stockData: {}\n        }\n        this.webSocket = new WebSocket(Constants.WebSocketServerURL);\n    }\n\n    componentDidMount() {\n        this.webSocket.onopen = () => {\n            console.log('Connection Established!');\n        }\n\n        this.webSocket.onmessage = event => {\n            let stockDataMessage = JSON.parse(event.data);\n            let state_stocks = {...this.state.stockData };\n\n            stockDataMessage.forEach(data => {\n                let key = data[0];\n                let value = data[1];\n                state_stocks[key] = parseFloat(value).toFixed(2);\n            });\n            \n            this.setState({\n                stockData: state_stocks\n            });\n        }\n\n        this.webSocket.onclose = () => {\n            console.log('Connection Disconnected!');\n        }\n    }\n\n    render() {\n        \n        return (\n                <TableComponent tableData={this.state.stockData}></TableComponent>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport StocksComponent from './Containers/StocksComponent/StocksComponent';\n\nfunction App() {\n  return (\n    <StocksComponent></StocksComponent>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}